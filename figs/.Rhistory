fitm$wadj
fitm <- mgmfit(data, rep('g', 4), rep(1, 4), binary.sign = TRUE)
fitm <- mgmfit(data, rep('g', 4), rep(1, 4), binary.sign = FALSE)
fitm <- mgmfit(data, rep('g', 4), rep(1, 4), binary.sign = TRUE)
i <- 5
bs <- TRUE
cat(paste0(paper_names[i],'\n'))
df <- l_data[[i]]
df$type
mgmfit(data = df$data,
type = df$type,
lev = df$lev,
lambda.sel = 'EBIC',
rule.reg = 'AND',
folds = 5,
d = 1,
binary.sign = bs)
df$lev
#################################################################################################
#                                                                                               #
#                                  Network Prediction Paper                                     #
#                                                                                               #
#                                    Paper: Deserno2016                                         #
#                                                                                               #
#                           Collecting Data for Network in Figure: 2                            #
#                                                                                               #
#                                                                                               #
# Preprocessing performs the following steps:                                                   #
# 1) Loads the data from foreign datafile                                                       #
# 2) If necessary preprocess data to arrive at variables as in paper                            #
# 3) Save list containing data matrix & type & column names as .RDS file                        #
#                                                                                               #
#                                                                                               #
#################################################################################################
paper <- 'Deserno2016'
codeDir <- '/Users/jmb/Dropbox/MyData/_PhD/__projects/network_prediction/4_code/ReAnalysis/'
dataDir <- paste0('/Users/jmb/Dropbox/MyData/_PhD/__projects/network_prediction/2_data/', paper, '/data/')
materialsDir <- paste0('/Users/jmb/Dropbox/MyData/_PhD/__projects/network_prediction/2_data/', paper, '/materials/')
dataTarDir <- '/Users/jmb/Dropbox/MyData/_PhD/__projects/network_prediction/4_code/ReAnalysis/recovered_data/'
# -----------------------------------------------------------------------------------------------
# ---------- Load Data --------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------
list.files(dataDir)
data_raw <- read.csv(paste0(dataDir, 'DataAutismDesernoEtAl2016.csv'), header=TRUE)
colnames(data_raw)
head(data_raw)
dim(data_raw)
# -----------------------------------------------------------------------------------------------
# ---------- Preprocessing ----------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------
# Short variable names (obtained from authors)
names_short <- c("gen", "IQ","ageD", "tolD", "suc","hap",
"con","fam","com","phy", "tre", "med",
"carI","liv", "edU","wor","worH","int","soc",
"cha",        "tra", "advS", "treS", "carS",
"socS", "inf", "age")
# Short variable names (obtained from authors)
names_long <- c("(1) male (2) female", "IQ", "age of diagnosis", "open about diagnosis", "succesful", "happy",
"societal contribution", "no. family members with ASD", "no. of co-occurring diagnoses", "no. of physical problems", "no. of treatments one has had", "no. of medication one has used",
"no. of care indications", "(1) supervised (2) unsupervised living", "number of unfinished education", "level of daily activity", "no. of work hours",
"no. of interests", "no. of social contacts", "no. of strong characteristics", "no. of problematic transition periods in life", "satisfaction about given advice", "satisfaction about received treatment",
"satisfaction about received care", "satisfaction about social contacts", "filled out by (1) other (2) self", "age")
data <- data_raw
# Missing data Analysis (PROBLEM!!!)
# missing_data <- round(apply(data_raw, 1, function(x) sum(is.na(x))/length(x)),5)
# pdf(paste0(materialsDir, 'DesernoMissingData.pdf'))
# par(mar=c(7,3,1,1))
# barplot(missing_data, las=2, ylim=c(0,.7))
# dev.off()
data <- na.omit(data)
# Additonal Info
p <- ncol(data)
#names <- colnames(data)
type <- rep('g', p)
lev <- rep(1, p)
# -----------------------------------------------------------------------------------------------
# ---------- Sanity Checks ----------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------
# 1) Dimensions Match Description in Paper? (n=477, p=14)
dim(data) # We lose 25% of the data due to casewise deletion;
# 2) Missing Values?
table(is.na(data)) #
data <- na.omit(data)
dim(data)
# -----------------------------------------------------------------------------------------------
# ---------- Save Data --------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------
colnames(data) <- NULL
rownames(data) <- NULL
datalist <- list('data'=data,
'type'=type,
'lev'=lev,
'names'=names_short,
'names_long'=names_long,
'info'=NULL)
saveRDS(datalist, paste0(dataTarDir, paper, '.RDS'))
l_data <- list()
for(i in 1:n_files) l_data[[i]] <- readRDS(paste0(dataTarDir, file_names[i]))
mgmfit(data = df$data,
type = df$type,
lev = df$lev,
lambda.sel = 'EBIC',
rule.reg = 'AND',
folds = 5,
d = 1,
binary.sign = bs)
df <- l_data[[i]]
mgmfit(data = df$data,
type = df$type,
lev = df$lev,
lambda.sel = 'EBIC',
rule.reg = 'AND',
folds = 5,
d = 1,
binary.sign = bs)
df$type
type
#################################################################################################
#                                                                                               #
#                                  Network Prediction Paper                                     #
#                                                                                               #
#                                    Paper: Deserno2016                                         #
#                                                                                               #
#                           Collecting Data for Network in Figure: 2                            #
#                                                                                               #
#                                                                                               #
# Preprocessing performs the following steps:                                                   #
# 1) Loads the data from foreign datafile                                                       #
# 2) If necessary preprocess data to arrive at variables as in paper                            #
# 3) Save list containing data matrix & type & column names as .RDS file                        #
#                                                                                               #
#                                                                                               #
#################################################################################################
paper <- 'Deserno2016'
codeDir <- '/Users/jmb/Dropbox/MyData/_PhD/__projects/network_prediction/4_code/ReAnalysis/'
dataDir <- paste0('/Users/jmb/Dropbox/MyData/_PhD/__projects/network_prediction/2_data/', paper, '/data/')
materialsDir <- paste0('/Users/jmb/Dropbox/MyData/_PhD/__projects/network_prediction/2_data/', paper, '/materials/')
dataTarDir <- '/Users/jmb/Dropbox/MyData/_PhD/__projects/network_prediction/4_code/ReAnalysis/recovered_data/'
# -----------------------------------------------------------------------------------------------
# ---------- Load Data --------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------
list.files(dataDir)
data_raw <- read.csv(paste0(dataDir, 'DataAutismDesernoEtAl2016.csv'), header=TRUE)
colnames(data_raw)
head(data_raw)
dim(data_raw)
# -----------------------------------------------------------------------------------------------
# ---------- Preprocessing ----------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------
# Short variable names (obtained from authors)
names_short <- c("gen", "IQ","ageD", "tolD", "suc","hap",
"con","fam","com","phy", "tre", "med",
"carI","liv", "edU","wor","worH","int","soc",
"cha",        "tra", "advS", "treS", "carS",
"socS", "inf", "age")
# Short variable names (obtained from authors)
names_long <- c("(1) male (2) female", "IQ", "age of diagnosis", "open about diagnosis", "succesful", "happy",
"societal contribution", "no. family members with ASD", "no. of co-occurring diagnoses", "no. of physical problems", "no. of treatments one has had", "no. of medication one has used",
"no. of care indications", "(1) supervised (2) unsupervised living", "number of unfinished education", "level of daily activity", "no. of work hours",
"no. of interests", "no. of social contacts", "no. of strong characteristics", "no. of problematic transition periods in life", "satisfaction about given advice", "satisfaction about received treatment",
"satisfaction about received care", "satisfaction about social contacts", "filled out by (1) other (2) self", "age")
data <- data_raw
# Missing data Analysis (PROBLEM!!!)
# missing_data <- round(apply(data_raw, 1, function(x) sum(is.na(x))/length(x)),5)
# pdf(paste0(materialsDir, 'DesernoMissingData.pdf'))
# par(mar=c(7,3,1,1))
# barplot(missing_data, las=2, ylim=c(0,.7))
# dev.off()
data <- na.omit(data)
# Additonal Info
p <- ncol(data)
#names <- colnames(data)
type <- rep('g', p)
lev <- rep(1, p)
# -----------------------------------------------------------------------------------------------
# ---------- Sanity Checks ----------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------
# 1) Dimensions Match Description in Paper? (n=477, p=14)
dim(data) # We lose 25% of the data due to casewise deletion;
# 2) Missing Values?
table(is.na(data)) #
data <- na.omit(data)
dim(data)
# -----------------------------------------------------------------------------------------------
# ---------- Save Data --------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------
colnames(data) <- NULL
rownames(data) <- NULL
datalist <- list('data'=data,
'type'=type,
'lev'=lev,
'names'=names_short,
'names_long'=names_long,
'info'=NULL)
saveRDS(datalist, paste0(dataTarDir, paper, '.RDS'))
i
i <- 5
df <- l_data[[i]]
df$type
df$lev
mgmfit(data = df$data,
type = df$type,
lev = df$lev,
lambda.sel = 'EBIC',
rule.reg = 'AND',
folds = 5,
d = 1,
binary.sign = bs)
data = df$data
type = df$type
lev = df$lev
mgmfit(data, type, lev)
mgmfit(data, type, lev, binary.sign = TRUE)
lambda.sel = "EBIC" # method for penalization parameter (lambda) -selection
binary.sign = TRUE
# +++++ checks on function input ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #####
# Check on variable typee
if(sum(!(type %in% c('c', 'g', 'p')))>0) stop("Only Gaussian 'g', Poisson 'p' or categorical 'c' variables allowed.")
# Get basic info #1
nNode <- ncol(data)
# IF VAR: change data structure (+++)
if(VAR) {
data <- VARreshape(as.matrix(data))
lev <- c(lev, lev)
type <- c(type, type)
}
VAR = FALSE
lambda.sel = "EBIC" # method for penalization parameter (lambda) -selection
folds = 10 # folds in case CV is used for lambda selection
gam = .25 # tuning parameter for EBIC in case EBIC is used for lambda selection
d = 2 # maximal degree of the true graph
rule.reg = "AND" # parameter-aggregation of categorical variables
pbar = TRUE # shows a progress bar if TRUE
method = 'glm'  # which method should be used for each nodewise regression?
missings = 'error' # handling of missing data
weights = NA # weights for observations
ret.warn = TRUE # TRUE returns warnings makes sense to switch off for time varying wrapper
binary.sign = FALSE # should we assign
VAR = FALSE # autoregressive model yes/no
rs_indicator = NULL # indicator to subset data for resampling (necessary because of VAR pipeline)
binary.sign = TRUE
# Check on variable typee
if(sum(!(type %in% c('c', 'g', 'p')))>0) stop("Only Gaussian 'g', Poisson 'p' or categorical 'c' variables allowed.")
# Get basic info #1
nNode <- ncol(data)
# IF VAR: change data structure (+++)
if(VAR) {
data <- VARreshape(as.matrix(data))
lev <- c(lev, lev)
type <- c(type, type)
}
# Apply rs_indicator:
if(!is.null(rs_indicator)) {
#checks:
if(sum(!(rs_indicator %in% 1:nrow(data)))>0) stop('Subsampling indices specified that are not in the data.')
#apply:
data <- data[rs_indicator,]
}
# get basic info #2
n <- nrow(data)
c_ind <- which(type == "c") #indicator which variable categorical
binary.sign
ind_binary <- apply(data, 2, function(x) length(unique(x))) == 2
ind_binary
'c' %in% type
type
data <- read.csv('http://psychosystems.org/wp-content/uploads/2014/10/Wenchuan.csv')
head(data)
dim(data)
fitobj <- mgmfit(data = data,
type = rep('g', 17),
lev = rep(1, 17),
d = 2,
rule.reg = 'AND',
lambda.sel = 'EBIC',
gam = .25)
data
data <- na.omit(data)
nrow(data)
data <- read.csv('http://psychosystems.org/wp-content/uploads/2014/10/Wenchuan.csv')
data <- na.omit(data)
nrow(data)
# Snippet 2: Estimate Model
fitobj <- mgmfit(data = data,
type = rep('g', 17),
lev = rep(1, 17),
d = 2,
rule.reg = 'AND',
lambda.sel = 'EBIC',
gam = .25)
fitobj$wadj
round(fitobj$wadj, 2)
set.seed(1)
ind <- sample(c(TRUE, FALSE), prob=c(.7, .3))
ind
ind <- sample(c(TRUE, FALSE), prob=c(.7, .3), size = nrow(data), replace = T)
ind
fitobj_ooS <- mgmfit(data = data,
type = rep('g', 17),
lev = rep(1, 17),
)
pred_withinS <- predict(fitobj_ooS, data[ind,])
pred_outofS <- predict(fitobj_ooS, data[!ind,])
pred_withinS$error$Error
pred_outofS$error$Error
plot(pred_withinS$error$Error, pred_outofS$error$Error)
set.seed(2)
ind <- sample(c(TRUE, FALSE), size = nrow(data), replace = T)
fitobj_ooS <- mgmfit(data = data[ind,],
type = rep('g', 17),
lev = rep(1, 17))
pred_withinS <- predict(fitobj_ooS, data[ind,])
pred_outofS <- predict(fitobj_ooS, data[!ind,])
plot(pred_withinS$error$Error, pred_outofS$error$Error)
set.seed(3)
ind <- sample(c(TRUE, FALSE), size = nrow(data), replace = T)
fitobj_ooS <- mgmfit(data = data[ind,],
type = rep('g', 17),
lev = rep(1, 17))
pred_withinS <- predict(fitobj_ooS, data[ind,])
pred_outofS <- predict(fitobj_ooS, data[!ind,])
plot(pred_withinS$error$Error, pred_outofS$error$Error)
cor(pred_withinS$error$Error, pred_outofS$error$Error)
set.seed(23)
ind <- sample(c(TRUE, FALSE), size = nrow(data), replace = T)
fitobj_ooS <- mgmfit(data = data[ind,],
type = rep('g', 17),
lev = rep(1, 17))
pred_withinS <- predict(fitobj_ooS, data[ind,])
pred_outofS <- predict(fitobj_ooS, data[!ind,])
plot(pred_withinS$error$Error, pred_outofS$error$Error)
cor(pred_withinS$error$Error, pred_outofS$error$Error)
mean(ind)
predobj <- predict(fitobj, data)
predobj$error
predobj <- predict(fitobj, data, error.continuous = 'VarExpl')
predobj$error
qgraph(fitobj$wadj,
layout = 'spring')
qgraph(fitobj$wadj,
layout = 'spring',
labels = colnames(data))
getwd()
setwd('/Users/jmb/Dropbox/MyData/jmbh.github.io/figs')
jpg('PTSD_Network.jpg', 1000, 1000)
qgraph(fitobj$wadj,
layout = 'spring',
labels = colnames(data))
dev.off()
jpeg('PTSD_Network.jpg', 1000, 1000)
qgraph(fitobj$wadj,
layout = 'spring',
labels = colnames(data))
dev.off()
jpeg('PTSD_Network.jpg', 1000, 1000)
qgraph(fitobj$wadj,
layout = 'spring',
labels = colnames(data),
pie = predobj$error$Error)
dev.off()
jpeg('PTSD_Network.jpg', 1000, 1000)
qgraph(fitobj$wadj,
layout = 'spring',
labels = colnames(data),
pie = predobj$error$Error,
pieColor = '#377EB8')
dev.off()
?qgraph
qgraph(fitobj$wadj,
layout = 'spring',
labels = colnames(data),
pie = predobj$error$Error,
pieColor = '#377EB8')
qgraph(fitobj$wadj,
layout = 'spring',
labels = colnames(data),
pie = predobj$error$Error,
pieColor = '#377EB8',
pieBorder = .6)
qgraph(fitobj$wadj,
layout = 'spring',
labels = colnames(data),
pie = predobj$error$Error,
pieColor = '#377EB8',
pieBorder = 1.1)
qgraph(fitobj$wadj,
layout = 'spring',
labels = colnames(data),
pie = predobj$error$Error,
pieColor = '#377EB8',
pieBorder = .9)
qgraph(fitobj$wadj,
layout = 'spring',
labels = colnames(data),
pie = predobj$error$Error,
pieColor = '#377EB8',
pieBorder = .1)
library(qgraph)
jpeg('PTSD_Network.jpg', 1000, 1000)
qgraph(fitobj$wadj,
layout = 'spring',
labels = colnames(data),
pie = predobj$error$Error,
pieColor = '#377EB8',
pieBorder = .12)
dev.off()
data <- scale(data)
nrow(data)
# Snippet 2: Estimate Model
library(mgm)
fitobj <- mgmfit(data = data,
type = rep('g', 17),
lev = rep(1, 17),
d = 2,
rule.reg = 'AND',
lambda.sel = 'EBIC',
gam = .25)
# Snippet 3: Compute Predictability
predobj <- predict(fitobj, data, error.continuous = 'VarExpl')
predobj$error
predobj <- predict(fitobj, data, error.continuous = 'VarExpl')
predobj$error
qgraph(fitobj$wadj,
layout = 'spring',
labels = colnames(data),
pie = predobj$error$Error,
pieColor = '#377EB8',
pieBorder = .12)
?predict.mgm
fitobj <- mgmfit(data = data,
type = rep('g', 17),
lev = rep(1, 17),
d = 2,
rule.reg = 'AND',
lambda.sel = 'EBIC',
gam = .25)
predobj <- predict(fitobj, data, error.continuous = 'VarExpl')
predobj$error
predobj <- predict(fitobj, data, error.continuous = 'RMSE')
predobj$error
predobj$error
head(data)
# Snippet 1: Load Data
data <- read.csv('http://psychosystems.org/wp-content/uploads/2014/10/Wenchuan.csv')
data <- na.omit(data)
nrow(data)
qgraph(fitobj$wadj,
layout = 'spring',
labels = colnames(data),
pie = predobj$error$Error,
pieColor = '#377EB8',
pieBorder = .12)
predobj$error
fitobj$node.models[[8]]
fitobj$wadj[,8]
fitobj$wadj[8,]
fitobj$mpar.matrix
fitobj$mpar.matrix[,8]
fitobj$mpar.matrix[8,]
fitobj$node.models[[1]]$lambda
fitobj$node.models[[1]]$threshold
fitobj$wadj[8,]
fitobj$mpar.matrix[8,]
fitobj$mpar.matrix[8,] < fitobj$node.models[[1]]$threshold
fitobj <- mgmfit(data = data,
type = rep('g', 17),
lev = rep(1, 17),
d = 2,
rule.reg = 'OR',
lambda.sel = 'EBIC',
gam = .25)
# Snippet 3: Compute Predictability
predobj <- predict(fitobj, data, error.continuous = 'RMSE')
# Snippet 1: Load Data
data <- read.csv('http://psychosystems.org/wp-content/uploads/2014/10/Wenchuan.csv')
data <- na.omit(data)
nrow(data)
# Snippet 2: Estimate Model
library(mgm)
fitobj <- mgmfit(data = data,
type = rep('g', 17),
lev = rep(1, 17),
d = 2,
rule.reg = 'OR',
lambda.sel = 'EBIC',
gam = .25)
# Snippet 3: Compute Predictability
predobj <- predict(fitobj, data, error.continuous = 'RMSE')
qgraph(fitobj$wadj,
layout = 'spring',
labels = colnames(data),
pie = predobj$error$Error,
pieColor = '#377EB8',
pieBorder = .12)
qgraph(fitobj$wadj,
layout = 'spring',
labels = colnames(data),
pie = predobj$error$Error,
pieColor = '#377EB8',
pieBorder = .12,
edge.color = fitobj$edgecolor)
fitobj$edgecolor
fitobj$edgecolor
jpeg('PTSD_Network.jpg', 1000, 1000)
qgraph(fitobj$wadj,
layout = 'spring',
labels = colnames(data),
pie = predobj$error$Error,
pieColor = '#377EB8',
pieBorder = .12,
edge.color = fitobj$edgecolor)
dev.off()
