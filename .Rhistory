all <- 90+65+58.1+50.5+64.5+53+18.6+74+50+92+62+175+5.7
all
all / 3
136+22.01+56.95
all <- 136+22.01+56.95
all / 3
month <- all / 3
month - 68.67
7*2.983333
68.67*3
month
(71.65-68.67)*7
368/3
359.2-156
359.20 / 3
201.01 + 20.86 + 122.67 - 119.73
all_new <- 22.01+56.95+102
(22.01+56.95+102)/3
c1 <- c(0.1, 0.5)
ll <- list(c(0.1, .3),
c(.5, 1.7),
c(1.1, 0.9),
c(0.8, 0.8))
ll
lapply(ll, mean)
lapply(ll, sd)
library(mgm)
mood_data <- as.matrix(symptom_data$data[, 1:12])
mood_labels <- symptom_data$colnames[1:12]
colnames(mood_data) <- mood_labels
time_data <- symptom_data$data_time
unique(time_data$dayno)
length(unique(time_data$dayno))
length(unique(mood_data))
length(unique(as.numeric(mood_data)))
head(mood_data)
mood_data <- as.matrix(symptom_data$data[, 1:12])
table(mood_data[, 2])
table(mood_data[, 12])
table(mood_data[, 2])
table(mood_data[, 3])
table(mood_data[, 4])
table(mood_data[, 5])
table(mood_data[, 6])
head(mood_data)
dim(mood_data)
head(time_data)
#' This R script will process all R mardown files (those with in_ext file extention,
#' .rmd by default) in the current working directory. Files with a status of
#' 'processed' will be converted to markdown (with out_ext file extention, '.markdown'
#' by default). It will change the published parameter to 'true' and change the
#' status parameter to 'publish'.
#'
#' @param path_site path to the local root storing the site files
#' @param dir_rmd directory containing R Markdown files (inputs)
#' @param dir_md directory containing markdown files (outputs)
#' @param url_images where to store/get images created from plots directory +"/" (relative to path_site)
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer <jason@bryer.org> edited by Andy South
#'
rmd2md <- function( path_site = getwd(),
dir_rmd = "_source",
dir_md = "_posts",
#dir_images = "figures",
url_images = "assets/img/",
out_ext='.md',
in_ext='.Rmd',
recursive=FALSE) {
require(knitr, quietly=FALSE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
show(files)
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f))
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
# browser()
# Edit Jonas July 23rd; delete the "status: XX" line, because it interferes with the blogpost preview on the landing page
content <- content[-7]
# Turn " " lines into "" lines
content[content == " "] <- ""
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = paste0(url_images,f,"/"))
#andy I could try to make figures bigger
#but that might make not work so well on mobile
#opts_chunk$set(fig.width  = 8.5,
#               fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
rmd2md()
500 * 100 * 100 * 74 * 2
class(time_data)
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer <jason@bryer.org> edited by Andy South
#'
rmd2md <- function( path_site = getwd(),
dir_rmd = "_source",
dir_md = "_posts",
#dir_images = "figures",
url_images = "assets/img/",
out_ext='.md',
in_ext='.Rmd',
recursive=FALSE) {
require(knitr, quietly=FALSE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
show(files)
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f))
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
# browser()
# Edit Jonas July 23rd; delete the "status: XX" line, because it interferes with the blogpost preview on the landing page
content <- content[-7]
# Turn " " lines into "" lines
content[content == " "] <- ""
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = paste0(url_images,f,"/"))
#andy I could try to make figures bigger
#but that might make not work so well on mobile
#opts_chunk$set(fig.width  = 8.5,
#               fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
rmd2md()
rmd2md()
pdf("PlotForFB.pdf", width=9, height = 3)
par(mfrow=c(1,3))
for(tp in c(1,10,20)) qgraph(t(tvvar_obj$wadj[, , 1, tp]),
layout = "circle",
edge.color = t(tvvar_obj$edgecolor[, , 1, tp]),
labels = mood_labels,
mar = rep(5, 4),
vsize=14, esize=15, asize=13,
maximum = .5,
pie = pred_obj$tverrors[[tp]][, 3],
title = paste0("Estimation point = ", tp))
library(mgm)
mood_data <- as.matrix(symptom_data$data[, 1:12])
mood_labels <- symptom_data$colnames[1:12]
colnames(mood_data) <- mood_labels
time_data <- symptom_data$data_time
bandwidth <- .34
# Estimate Model on Full Dataset
set.seed(1)
tvvar_obj <- tvmvar(data = mood_data,
type = rep("g", 12),
level = rep(1, 12),
lambdaSel = "CV",
lags = 1,
beepvar = time_data$beepno,
dayvar = time_data$dayno,
timepoints = time_data$time_norm,
estpoints = seq(0, 1, length = 20),
bandwidth = bandwidth,
pbar = FALSE)
pred_obj <- predict(object = tvvar_obj,
data = mood_data,
beepvar = time_data$beepno,
dayvar = time_data$dayno,
errorCon = c("R2", "RMSE"),
tvMethod = "weighted")
pdf("PlotForFB.pdf", width=9, height = 3)
par(mfrow=c(1,3))
for(tp in c(1,10,20)) qgraph(t(tvvar_obj$wadj[, , 1, tp]),
layout = "circle",
edge.color = t(tvvar_obj$edgecolor[, , 1, tp]),
labels = mood_labels,
mar = rep(5, 4),
vsize=14, esize=15, asize=13,
maximum = .5,
pie = pred_obj$tverrors[[tp]][, 3],
title = paste0("Estimation point = ", tp))
dev.off()
pdf("PlotForFB.pdf", width=9, height = 3)
par(mfrow=c(1,3))
for(tp in c(1,10,20)) qgraph(t(tvvar_obj$wadj[, , 1, tp]),
layout = "circle",
edge.color = t(tvvar_obj$edgecolor[, , 1, tp]),
labels = mood_labels,
mar = rep(5, 4),
vsize=14, esize=15, asize=13,
maximum = .5,
pie = pred_obj$tverrors[[tp]][, 3],
title = paste0("Estimation point = ", tp),
title.cex=2)
dev.off()
pdf("PlotForFB.pdf", width=9, height = 3)
par(mfrow=c(1,3))
for(tp in c(1,10,20)) qgraph(t(tvvar_obj$wadj[, , 1, tp]),
layout = "circle",
edge.color = t(tvvar_obj$edgecolor[, , 1, tp]),
labels = mood_labels,
mar = rep(5, 4),
vsize=14, esize=15, asize=13,
maximum = .5,
pie = pred_obj$tverrors[[tp]][, 3],
title = paste0("Estimation point = ", tp),
title.cex=1.3)
dev.off()
