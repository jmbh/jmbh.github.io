}
invisible()
}
#' This R script will process all R mardown files (those with in_ext file extention,
#' .rmd by default) in the current working directory. Files with a status of
#' 'processed' will be converted to markdown (with out_ext file extention, '.markdown'
#' by default). It will change the published parameter to 'true' and change the
#' status parameter to 'publish'.
#'
#' @param path_site path to the local root storing the site files
#' @param dir_rmd directory containing R Markdown files (inputs)
#' @param dir_md directory containing markdown files (outputs)
#' @param url_images where to store/get images created from plots directory +"/" (relative to path_site)
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer <jason@bryer.org> edited by Andy South
#'
rmd2md <- function( path_site = getwd(),
dir_rmd = "_source",
dir_md = "_posts",
#dir_images = "figures",
url_images = "assets/img/",
out_ext='.md',
in_ext='.Rmd',
recursive=FALSE) {
require(knitr, quietly=FALSE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
show(files)
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f))
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
# browser()
# Edit Jonas July 23rd; delete the "status: XX" line, because it interferes with the blogpost preview on the landing page
content <- content[-7]
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = paste0(url_images,f,"/"))
#andy I could try to make figures bigger
#but that might make not work so well on mobile
#opts_chunk$set(fig.width  = 8.5,
#               fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
rmd2md()
rmd2md()
rmd2md()
#' This R script will process all R mardown files (those with in_ext file extention,
#' .rmd by default) in the current working directory. Files with a status of
#' 'processed' will be converted to markdown (with out_ext file extention, '.markdown'
#' by default). It will change the published parameter to 'true' and change the
#' status parameter to 'publish'.
#'
#' @param path_site path to the local root storing the site files
#' @param dir_rmd directory containing R Markdown files (inputs)
#' @param dir_md directory containing markdown files (outputs)
#' @param url_images where to store/get images created from plots directory +"/" (relative to path_site)
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer <jason@bryer.org> edited by Andy South
#'
rmd2md <- function( path_site = getwd(),
dir_rmd = "_source",
dir_md = "_posts",
#dir_images = "figures",
url_images = "assets/img/",
out_ext='.md',
in_ext='.Rmd',
recursive=FALSE) {
require(knitr, quietly=FALSE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
show(files)
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f))
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
# browser()
# Edit Jonas July 23rd; delete the "status: XX" line, because it interferes with the blogpost preview on the landing page
content <- content[-7]
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = paste0(url_images,f,"/"))
#andy I could try to make figures bigger
#but that might make not work so well on mobile
#opts_chunk$set(fig.width  = 8.5,
#               fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
rmd2md()
#' This R script will process all R mardown files (those with in_ext file extention,
#' .rmd by default) in the current working directory. Files with a status of
#' 'processed' will be converted to markdown (with out_ext file extention, '.markdown'
#' by default). It will change the published parameter to 'true' and change the
#' status parameter to 'publish'.
#'
#' @param path_site path to the local root storing the site files
#' @param dir_rmd directory containing R Markdown files (inputs)
#' @param dir_md directory containing markdown files (outputs)
#' @param url_images where to store/get images created from plots directory +"/" (relative to path_site)
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer <jason@bryer.org> edited by Andy South
#'
rmd2md <- function( path_site = getwd(),
dir_rmd = "_source",
dir_md = "_posts",
#dir_images = "figures",
url_images = "assets/img/",
out_ext='.md',
in_ext='.Rmd',
recursive=FALSE) {
require(knitr, quietly=FALSE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
show(files)
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f))
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
browser()
# Edit Jonas July 23rd; delete the "status: XX" line, because it interferes with the blogpost preview on the landing page
content <- content[-7]
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = paste0(url_images,f,"/"))
#andy I could try to make figures bigger
#but that might make not work so well on mobile
#opts_chunk$set(fig.width  = 8.5,
#               fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
rmd2md()
content
# Turn " " lines into "" lines
content == " "
#' This R script will process all R mardown files (those with in_ext file extention,
#' .rmd by default) in the current working directory. Files with a status of
#' 'processed' will be converted to markdown (with out_ext file extention, '.markdown'
#' by default). It will change the published parameter to 'true' and change the
#' status parameter to 'publish'.
#'
#' @param path_site path to the local root storing the site files
#' @param dir_rmd directory containing R Markdown files (inputs)
#' @param dir_md directory containing markdown files (outputs)
#' @param url_images where to store/get images created from plots directory +"/" (relative to path_site)
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer <jason@bryer.org> edited by Andy South
#'
rmd2md <- function( path_site = getwd(),
dir_rmd = "_source",
dir_md = "_posts",
#dir_images = "figures",
url_images = "assets/img/",
out_ext='.md',
in_ext='.Rmd',
recursive=FALSE) {
require(knitr, quietly=FALSE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
show(files)
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f))
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
# browser()
# Edit Jonas July 23rd; delete the "status: XX" line, because it interferes with the blogpost preview on the landing page
content <- content[-7]
# Turn " " lines into "" lines
content[content == " "] <- ""
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = paste0(url_images,f,"/"))
#andy I could try to make figures bigger
#but that might make not work so well on mobile
#opts_chunk$set(fig.width  = 8.5,
#               fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
rmd2md()
fit_ADS <- mgm(data = as.matrix(autism_data_large$data),
type = autism_data_large$type,
level = autism_data_large$level,
k = 2,
lambdaSel = 'EBIC',
lambdaGam = 0.25,
pbar = FALSE)
groups_typeV <- list("Gaussian"=which(autism_data_large$type=='g'),
"Poisson"=which(autism_data_large$type=='p'),
"Categorical"=which(autism_data_large$type=='c'))
library(qgraph)
qgraph(fit_ADS$pairwise$wadj,
layout = 'spring', repulsion = 1.3,
edge.color = fit_ADS$pairwise$edgecolor,
nodeNames = autism_data_large$colnames,
color = autism_data_large$groups_color,
groups = groups_typeV,
legend.mode="style2", legend.cex=.45,
vsize = 3.5, esize = 15)
showInteraction(object = fit_ADS, int = c(17, 16))
int_16_17 <- showInteraction(object = fit_ADS, int = c(17, 16))
int_16_17
int_16_17$parameters
int_14_17 <- showInteraction(object = fit_ADS, int = c(17, 14))
int_14_17$parameters
int_14_17$parameter
int_14_17 <- showInteraction(object = fit_ADS, int = c(17, 14))
int_14_17$parameters
int_14_17
int_14_16 <- showInteraction(object = fit_ADS, int = c(14, 16))
int_14_16$parameters
rmd2md()
rmd2md()
rmd2md()
?resample
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
library(devtools)
install_github("jmbh/mgm")
getwd()
load("/Users/jonas/Dropbox/adolescent_networks/data/workspace_1.RData")
mgm_obj <- mgm(data = data_basic,
type = rep("g", 8),
level = rep(1, 8),
lambdaSel = "EBIC",
pbar=FALSE)
library(mgm)
mgm_obj <- mgm(data = data_basic,
type = rep("g", 8),
level = rep(1, 8),
lambdaSel = "EBIC",
pbar=FALSE)
qgraph(mgm_obj$pairwise$wadj,
edge.color = mgm_obj$pairwise$edgecolor,
edge.labels = TRUE,
layout = "circle",
labels = labels)
qgraph(mgm_obj$pairwise$wadj,
edge.color = mgm_obj$pairwise$edgecolor,
edge.labels = TRUE,
layout = "circle",
labels = labels)
library(qgraph)
qgraph(mgm_obj$pairwise$wadj,
edge.color = mgm_obj$pairwise$edgecolor,
edge.labels = TRUE,
layout = "circle",
labels = labels)
library(mgm)
mgm_obj <- mgm(data = data_short,
type = rep("g", 8),
level = rep(1, 8),
lambdaSel = "EBIC",
pbar=FALSE)
data_short <- data_long_complete[, labels]
mgm_obj <- mgm(data = data_short,
type = rep("g", 8),
level = rep(1, 8),
lambdaSel = "EBIC",
pbar=FALSE)
library(qgraph)
qgraph(mgm_obj$pairwise$wadj,
edge.color = mgm_obj$pairwise$edgecolor,
edge.labels = TRUE,
layout = "circle",
labels = labels)
labels <- c("tv", "socialmedia", "familyeat", "friends", "lifesatisfaction", "alcohol", "smoking", "stay_late", "age")
data_short <- data_long_complete[, labels]
dim(data_short)
library(mgm)
mgm_obj <- mgm(data = data_short,
type = rep("g", 9),
level = rep(1, 9),
lambdaSel = "EBIC",
pbar=FALSE)
library(qgraph)
qgraph(mgm_obj$pairwise$wadj,
edge.color = mgm_obj$pairwise$edgecolor,
edge.labels = TRUE,
layout = "circle",
labels = labels)
values = c(-1.5, 0, 1.5)
mgm_obj_wM <- mgm(data = data_short,
type = c(rep("g", 9)),
level = c(rep(1, 9)),
moderators = 9,
lambdaSel = "EBIC",
pbar = FALSE)
mgm_obj_wM$interactions$indicator
FactorGraph(mgm_obj_wM)
FactorGraph(mgm_obj_wM, PairwiseAsEdge = TRUE)
FactorGraph(mgm_obj_wM, PairwiseAsEdge = TRUE, edge.labels=TRUE)
data_long_complete <- na.omit(data_long)
# Subsetting
labels <- c("tv", "socialmedia", "familyeat", "friends", "lifesatisfaction", "alcohol", "smoking", "stay_late", "age")
data_short <- data_long_complete[, labels]
data_short$alcohol
head(data_short)
mgm_obj_wM <- mgm(data = data_short,
type = c(rep("g", 9)),
level = c(rep(1, 9)),
moderators = 9,
lambdaSel = "EBIC",
pbar = FALSE)
library(mgm)
mgm_obj_wM <- mgm(data = data_short,
type = c(rep("g", 9)),
level = c(rep(1, 9)),
moderators = 9,
lambdaSel = "EBIC",
pbar = FALSE)
mgm_obj_wM_age_0 <- condition(object = mgm_obj_wM,
values = list("9"=-1.5))
mgm_obj_wM_age_1 <- condition(object = mgm_obj_wM,
values = list("9"=0))
mgm_obj_wM_age_2 <- condition(object = mgm_obj_wM,
values = list("9"=1.5))
l_mgm_obj <- list(mgm_obj_wM_age_0, mgm_obj_wM_age_1, mgm_obj_wM_age_2)
values = c(-1.5, 0, 1.5)
par(mfrow=c(1,3))
for(i in 1:3) qgraph(l_mgm_obj[[i]]$pairwise$wadj,
edge.color = l_mgm_obj[[i]]$pairwise$edgecolor,
edge.labels = TRUE,
layout = "circle",
labels = labels_wM, title = "Age = -1.5", maximum = .3)
library(qgraph)
par(mfrow=c(1,3))
for(i in 1:3) qgraph(l_mgm_obj[[i]]$pairwise$wadj,
edge.color = l_mgm_obj[[i]]$pairwise$edgecolor,
edge.labels = TRUE,
layout = "circle",
labels = labels_wM, title = "Age = -1.5", maximum = .3)
labels_wM
length(labels_wM)
par(mfrow=c(1,3))
for(i in 1:3) qgraph(l_mgm_obj[[i]]$pairwise$wadj,
edge.color = l_mgm_obj[[i]]$pairwise$edgecolor,
edge.labels = TRUE,
layout = "circle",
labels = labels, title = "Age = -1.5", maximum = .3)
