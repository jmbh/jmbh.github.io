content[content == " "] <- ""
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = paste0(url_images,f,"/"))
#andy I could try to make figures bigger
#but that might make not work so well on mobile
#opts_chunk$set(fig.width  = 8.5,
#               fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
rmd2md()
fit_ADS <- mgm(data = as.matrix(autism_data_large$data),
type = autism_data_large$type,
level = autism_data_large$level,
k = 2,
lambdaSel = 'EBIC',
lambdaGam = 0.25,
pbar = FALSE)
groups_typeV <- list("Gaussian"=which(autism_data_large$type=='g'),
"Poisson"=which(autism_data_large$type=='p'),
"Categorical"=which(autism_data_large$type=='c'))
library(qgraph)
qgraph(fit_ADS$pairwise$wadj,
layout = 'spring', repulsion = 1.3,
edge.color = fit_ADS$pairwise$edgecolor,
nodeNames = autism_data_large$colnames,
color = autism_data_large$groups_color,
groups = groups_typeV,
legend.mode="style2", legend.cex=.45,
vsize = 3.5, esize = 15)
showInteraction(object = fit_ADS, int = c(17, 16))
int_16_17 <- showInteraction(object = fit_ADS, int = c(17, 16))
int_16_17
int_16_17$parameters
int_14_17 <- showInteraction(object = fit_ADS, int = c(17, 14))
int_14_17$parameters
int_14_17$parameter
int_14_17 <- showInteraction(object = fit_ADS, int = c(17, 14))
int_14_17$parameters
int_14_17
int_14_16 <- showInteraction(object = fit_ADS, int = c(14, 16))
int_14_16$parameters
rmd2md()
rmd2md()
rmd2md()
?resample
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
library(devtools)
install_github("jmbh/mgm")
getwd()
load("/Users/jonas/Dropbox/adolescent_networks/data/workspace_1.RData")
mgm_obj <- mgm(data = data_basic,
type = rep("g", 8),
level = rep(1, 8),
lambdaSel = "EBIC",
pbar=FALSE)
library(mgm)
mgm_obj <- mgm(data = data_basic,
type = rep("g", 8),
level = rep(1, 8),
lambdaSel = "EBIC",
pbar=FALSE)
qgraph(mgm_obj$pairwise$wadj,
edge.color = mgm_obj$pairwise$edgecolor,
edge.labels = TRUE,
layout = "circle",
labels = labels)
qgraph(mgm_obj$pairwise$wadj,
edge.color = mgm_obj$pairwise$edgecolor,
edge.labels = TRUE,
layout = "circle",
labels = labels)
library(qgraph)
qgraph(mgm_obj$pairwise$wadj,
edge.color = mgm_obj$pairwise$edgecolor,
edge.labels = TRUE,
layout = "circle",
labels = labels)
library(mgm)
mgm_obj <- mgm(data = data_short,
type = rep("g", 8),
level = rep(1, 8),
lambdaSel = "EBIC",
pbar=FALSE)
data_short <- data_long_complete[, labels]
mgm_obj <- mgm(data = data_short,
type = rep("g", 8),
level = rep(1, 8),
lambdaSel = "EBIC",
pbar=FALSE)
library(qgraph)
qgraph(mgm_obj$pairwise$wadj,
edge.color = mgm_obj$pairwise$edgecolor,
edge.labels = TRUE,
layout = "circle",
labels = labels)
labels <- c("tv", "socialmedia", "familyeat", "friends", "lifesatisfaction", "alcohol", "smoking", "stay_late", "age")
data_short <- data_long_complete[, labels]
dim(data_short)
library(mgm)
mgm_obj <- mgm(data = data_short,
type = rep("g", 9),
level = rep(1, 9),
lambdaSel = "EBIC",
pbar=FALSE)
library(qgraph)
qgraph(mgm_obj$pairwise$wadj,
edge.color = mgm_obj$pairwise$edgecolor,
edge.labels = TRUE,
layout = "circle",
labels = labels)
values = c(-1.5, 0, 1.5)
mgm_obj_wM <- mgm(data = data_short,
type = c(rep("g", 9)),
level = c(rep(1, 9)),
moderators = 9,
lambdaSel = "EBIC",
pbar = FALSE)
mgm_obj_wM$interactions$indicator
FactorGraph(mgm_obj_wM)
FactorGraph(mgm_obj_wM, PairwiseAsEdge = TRUE)
FactorGraph(mgm_obj_wM, PairwiseAsEdge = TRUE, edge.labels=TRUE)
data_long_complete <- na.omit(data_long)
# Subsetting
labels <- c("tv", "socialmedia", "familyeat", "friends", "lifesatisfaction", "alcohol", "smoking", "stay_late", "age")
data_short <- data_long_complete[, labels]
data_short$alcohol
head(data_short)
mgm_obj_wM <- mgm(data = data_short,
type = c(rep("g", 9)),
level = c(rep(1, 9)),
moderators = 9,
lambdaSel = "EBIC",
pbar = FALSE)
library(mgm)
mgm_obj_wM <- mgm(data = data_short,
type = c(rep("g", 9)),
level = c(rep(1, 9)),
moderators = 9,
lambdaSel = "EBIC",
pbar = FALSE)
mgm_obj_wM_age_0 <- condition(object = mgm_obj_wM,
values = list("9"=-1.5))
mgm_obj_wM_age_1 <- condition(object = mgm_obj_wM,
values = list("9"=0))
mgm_obj_wM_age_2 <- condition(object = mgm_obj_wM,
values = list("9"=1.5))
l_mgm_obj <- list(mgm_obj_wM_age_0, mgm_obj_wM_age_1, mgm_obj_wM_age_2)
values = c(-1.5, 0, 1.5)
par(mfrow=c(1,3))
for(i in 1:3) qgraph(l_mgm_obj[[i]]$pairwise$wadj,
edge.color = l_mgm_obj[[i]]$pairwise$edgecolor,
edge.labels = TRUE,
layout = "circle",
labels = labels_wM, title = "Age = -1.5", maximum = .3)
library(qgraph)
par(mfrow=c(1,3))
for(i in 1:3) qgraph(l_mgm_obj[[i]]$pairwise$wadj,
edge.color = l_mgm_obj[[i]]$pairwise$edgecolor,
edge.labels = TRUE,
layout = "circle",
labels = labels_wM, title = "Age = -1.5", maximum = .3)
labels_wM
length(labels_wM)
par(mfrow=c(1,3))
for(i in 1:3) qgraph(l_mgm_obj[[i]]$pairwise$wadj,
edge.color = l_mgm_obj[[i]]$pairwise$edgecolor,
edge.labels = TRUE,
layout = "circle",
labels = labels, title = "Age = -1.5", maximum = .3)
plotRes(res_obj,
axis.ticks = c(-.1, 0, .1, .2, .3, .4, .5),
axis.ticks.mod = c(-.1, -.05, 0, .05, .1),
cex.label = 1,
labels = colnames(msq_p5),
layout.width.labels = .40)
install.packages("mgm")
library(mgm) # 1.1-7
set.seed(1)
mgm_mod <- mgm(data = data,
type = rep("g", 5),
level = rep(1, 5),
lambdaSel = "CV",
ruleReg = "AND",
moderators = 5,
threshold = "none",
pbar = FALSE)
library(mgm) # 1.1-7
set.seed(1)
mgm_mod <- mgm(data = data,
type = rep("g", 5),
level = rep(1, 5),
lambdaSel = "CV",
ruleReg = "AND",
moderators = 5,
threshold = "none",
pbar = FALSE)
remove.packages("mgm")
install.packages("mgm")
install.packages("mgm")
library(mgm) # 1.1-7
set.seed(1)
mgm_mod <- mgm(data = data,
type = rep("g", 5),
level = rep(1, 5),
lambdaSel = "CV",
ruleReg = "AND",
moderators = 5,
threshold = "none",
pbar = FALSE)
set.seed(1)
mgm_mod <- mgm(data = data,
type = rep("g", 5),
level = rep(1, 5),
lambdaSel = "CV",
ruleReg = "AND",
moderators = 5,
threshold = "none",
pbar = FALSE)
set.seed(1)
set.seed(1)
mgm_mod <- mgm(data = data,
type = rep("g", 5),
level = rep(1, 5),
lambdaSel = "CV",
ruleReg = "AND",
# moderators = 5,
threshold = "none",
pbar = FALSE)
data
data <- msq[, c("hostile", "lonely", "nervous", "sleepy", "depressed")]
data <- na.omit(data) # exclude rows with missing values
head(data)
for(i in 1:5) {
barplot(table(data[, i]), axes = FALSE, xlab = "", ylim = c(0, 3000))
axis(2, las = 2, c(0, 1000, 2000, 3000))
title(main = colnames(data)[i])
}
data <- msq[, c("hostile", "lonely", "nervous", "sleepy", "depressed")]
library(psych)
data <- msq[, c("hostile", "lonely", "nervous", "sleepy", "depressed")]
data <- na.omit(data) # exclude rows with missing values
head(data)
set.seed(1)
mgm_mod <- mgm(data = data,
type = rep("g", 5),
level = rep(1, 5),
lambdaSel = "CV",
ruleReg = "AND",
moderators = 5,
threshold = "none",
pbar = FALSE)
set.seed(1)
res_obj <- resample(object = mgm_mod,
data = data,
nB = 50,
pbar = FALSE)
plotRes(res_obj,
axis.ticks = c(-.1, 0, .1, .2, .3, .4, .5),
axis.ticks.mod = c(-.1, -.05, 0, .05, .1),
cex.label = 1,
labels = colnames(msq_p5),
layout.width.labels = .40)
rmd2md()
rmd2md()
rmd2md()
library(mgm)
?mgm
getwd()
Data_SLJ <- read.csv("/Users/jonas/Downloads/SLJ.csv")
str(Data_SLJ)
selection_ind <- c(which(Data_SLJ$groups == "relationship"),
which(Data_SLJ$colnames %in% c("gender", "family_type", "onlychild", "father_education", "mother_education", "family_economic", "family_history")))
Data_SLJ$data <- Data_SLJ$data[,selection_ind]
Data_SLJ$data <- as.matrix(Data_SLJ$data)
Data_SLJ$type <- Data_SLJ$type[selection_ind]
Data_SLJ$level <- Data_SLJ$level[selection_ind]
Data_SLJ$colnames <- Data_SLJ$colnames[selection_ind]
Data_SLJ$groups <- Data_SLJ$groups[selection_ind]
library(mgm)
Data_SLJ <- read.csv("/Users/jonas/Downloads/SLJ.csv")
str(Data_SLJ)
selection_ind <- c(which(Data_SLJ$groups == "relationship"),
which(Data_SLJ$colnames %in% c("gender", "family_type", "onlychild", "father_education", "mother_education", "family_economic", "family_history")))
Data_SLJ$data <- Data_SLJ$data[,selection_ind]
Data_SLJ$data <- as.matrix(Data_SLJ$data)
Data_SLJ$data <- as.matrix(Data_SLJ$data)
class(Data_SLJ)
class(Data_SLJ)
class(Data_SLJ$data)
# Data_SLJ$data <- as.matrix(Data_SLJ$data)
Data_SLJ$type <- Data_SLJ$type[selection_ind]
Data_SLJ$level <- Data_SLJ$level[selection_ind]
Data_SLJ$colnames <- Data_SLJ$colnames[selection_ind]
Data_SLJ$groups <- Data_SLJ$groups[selection_ind]
head(Data_SLJ$data)
Data_SLJ <- read.csv("/Users/jonas/Downloads/SLJ.csv")
str(Data_SLJ)
selection_ind <- c(which(Data_SLJ$groups == "relationship"),
which(Data_SLJ$colnames %in% c("gender", "family_type", "onlychild", "father_education", "mother_education", "family_economic", "family_history")))
Data_SLJ$data <- Data_SLJ$data[,selection_ind]
# Data_SLJ$data <- as.matrix(Data_SLJ$data)
Data_SLJ$type <- Data_SLJ$type[selection_ind]
Data_SLJ$level <- Data_SLJ$level[selection_ind]
Data_SLJ$colnames <- Data_SLJ$colnames[selection_ind]
Data_SLJ$groups <- Data_SLJ$groups[selection_ind]
head(Data_SLJ$data)
# head(Data_SLJ$data)
Data_SLJ$type
Data_SLJ$level
head(Data_SLJ)
# head(Data_SLJ$data)
Data_SLJ$type
data = as.matrix(Data_SLJ)
head(data)
Data_SLJ$type
Data_SLJ <- read.csv("/Users/jonas/Downloads/SLJ.csv")
str(Data_SLJ)
fit_obj <- mgm(data = as.matrix(Data_SLJ),
type = rep("g", ncol(Data_SLJ)),
level = rep(1, ncol(Data_SLJ)),
k = 2,
lambdaSel = 'EBIC',
lambdaGam = 0.25,
pbar = FALSE)
getwd()
ReplicationDf<-read.csv("/Users/jonas/Downloads/Data.csv")
head("ReplicationDf")
ReplicationDf
head(ReplicationDf)
# Subset data to create data set with variables of interest
ReplicationDf <- subset(ReplicationDf, select = c(Sad, Anhedonia, Guilt, SI, Decisions, Sleep, Fatigue, Appetite, CDI, Age, Sex,
BMI, q_aadis_0_score, q_aadis_1_score, Disease, CRP, IL6, TNFA, IL10, IL8))
head(ReplicationDf)
hist(ReplicationDf$CRP)   #CRP- skewed
hist(ReplicationDf$CRP)   #CRP- skewed
hist(ReplicationDf$IL6)     #IL6- skewed
hist(ReplicationDf$TNFA)    #alpha -skewed
hist(ReplicationDf$CDI)     #IDS total -skewed
hist(ReplicationDf$BMI) #bmi - skew
hist(ReplicationDf$Age) #age- no skew
hist(ReplicationDf$CRP)   #CRP- skewed
hist(ReplicationDf$IL6)     #IL6- skewed
hist(ReplicationDf$TNFA)    #alpha -skewed
hist(ReplicationDf$CDI)     #IDS total -skewed
hist(ReplicationDf$BMI) #bmi - skew
hist(ReplicationDf$Age) #age- no skew
skewness(ReplicationDf) #continuous variables with skew = BMI, 5 biomarkers
library(foreign)
library(qgraph)
library(bootnet)
library(dplyr)
library(markdown)
library(huge)
library(summarytools)
install.packages("summarytools")
library(summarytools)
library(moments)
install.packages("moments")
library(moments)
skewness(ReplicationDf) #continuous variables with skew = BMI, 5 biomarkers
hist(ReplicationDf$CRP)   #CRP- skewed
hist(ReplicationDf$IL6)     #IL6- skewed
hist(ReplicationDf$TNFA)    #alpha -skewed
hist(ReplicationDf$CRP)   #CRP- skewed
# Apply nonparanormal transformation to skewed distributions
ReplicationDf[12] <- huge.npn(ReplicationDf[12]) # normalize bmi
ReplicationDf[, 16:20] <- huge.npn(ReplicationDf[, 16:20]) # normalize biomarkers
#skew statistics
# options(scipen=999)
hist(ReplicationDf$CRP)   #CRP- skewed
hist(ReplicationDf$IL6)     #IL6- skewed
hist(ReplicationDf$TNFA)    #alpha -skewed
hist(ReplicationDf$BMI) #bmi - skew
skewness(ReplicationDf) #
hist(ReplicationDf$CRP)   #CRP
sum(scores(ReplicationDf$CRP, type="z", prob=0.997))    # 79 / 7 obs above the 3rd standard deviation based on z-scores (second value after transformation)
boxplot(ReplicationDf$CRP)
arrows(0.9, mean(ReplicationDf$CRP) - 3*sd(ReplicationDf$CRP), 0.9 , mean(ReplicationDf$CRP) + 3*sd(ReplicationDf$CRP), # +- 3SD
code = 3, col = "red", angle = 40, length = .1)
?scores
hist(ReplicationDf$CRP)   #CRP
sum(scores(ReplicationDf$CRP, type="z", prob=0.997))    # 79 / 7 obs above the 3rd standard deviation based on z-scores (second value after transformation)
boxplot(ReplicationDf$CRP)
arrows(0.9, mean(ReplicationDf$CRP) - 3*sd(ReplicationDf$CRP), 0.9 , mean(ReplicationDf$CRP) + 3*sd(ReplicationDf$CRP), # +- 3SD
code = 3, col = "red", angle = 40, length = .1)
hist(ReplicationDf$IL6)     #IL6
sum(scores(ReplicationDf$IL6, type="z", prob=0.997))      # 7 / 8 obs above the 3rd standard deviation based on z-scores (second value after transformation)
boxplot(ReplicationDf$IL6)
arrows(0.9, mean(ReplicationDf$IL6) - 3*sd(ReplicationDf$IL6), 0.9 , mean(ReplicationDf$IL6) + 3*sd(ReplicationDf$IL6), # +- 3SD
code = 3, col = "red", angle = 40, length = .1)
hist(ReplicationDf$TNFA)    #alpha
sum(scores(ReplicationDf$TNFA, type="z", prob=0.997))     # 43 / 19 above the 3rd standard deviation based on z-scores (second value after transformation)
boxplot(ReplicationDf$TNFA)
arrows(0.9, mean(ReplicationDf$TNFA) - 3*sd(ReplicationDf$TNFA), 0.9 , mean(ReplicationDf$TNFA) + 3*sd(ReplicationDf$TNFA), # +- 3SD
code = 3, col = "red", angle = 40, length = .1)
#Analyses 2a/b > mgm 9 DSM-IV MDD criteria symptoms building on the model from Jokela and colleagues (2016)
#create ReplicationDf set
#pident<-ReplicationDf$pident
sadmood<-ReplicationDf$Sad
interest<-ReplicationDf$Anhedonia
sleep<-ReplicationDf$Sleep
energy<-ReplicationDf$Fatigue
appetite<-ReplicationDf$Appetite
concentration<-ReplicationDf$Decisions
worthlessness<-ReplicationDf$Guilt
thoughtsofdeath<-ReplicationDf$SI
sex<-ReplicationDf$Sex
age<-ReplicationDf$Age
crp<-ReplicationDf$CRP
tnfa<-ReplicationDf$TNFA
il6<-ReplicationDf$IL6
alcohol<-ReplicationDf$q_aadis_1_score
smoking<-ReplicationDf$q_aadis_0_score
bmi<-ReplicationDf$BMI
diseases<-rpois(n = 279, lambda = 0.1)
#Analysis 3b: mgm 9 Depression Symptoms, CRP, all covariates, gamma = 0.25
#estimate mgm network
Rep3b <- cbind(crp, il6, tnfa, sadmood, interest, sleep, energy, appetite, concentration, worthlessness, thoughtsofdeath, sex, age, alcohol, smoking, bmi, diseases)
data_n_3b <- list("data" = NULL,
"type" = NULL,
"level" = NULL,
"names" = NULL,
"labels" = NULL,
"grouplabels"= NULL)
# Fill in
data_n_3b$data <- Rep3b
data_n_3b$type <- c(rep("g", 11), rep("c", 1), rep("g", 4), rep("p", 1))
data_n_3b$level <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1)
data_n_3b$names <- c("CRP", "IL6", "TNFa", "Sad Mood", "Interest/Pleasure", "Sleep Problems", "Energy Level", "Appetite/Weight",  "Concentration/Decisions", "Feeling Guilty", "Thoughts of Death", "Sex", "Age", "Alcohol", "Smoking", "BMI", "Chronic Diseases")
data_n_3b$labels <- c("IM1", "IM2", "IM3", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "C1", "C2", "C3", "C4", "C5", "C6")
data_n_3b$grouplabels <- list("Inflammation Marker" = c(1:3), "DSM Depression Criteria" = c(4:11), "Covariates" = c(12:17))
datax <- data_n_3b$data
view(dfSummary(datax))
bs_network3b_init <- mgm(data = data_n_3b$data,
type = data_n_3b$type,
level = data_n_3b$level,
lambdaSel = "EBIC",
lambdaGam = 0,
lambdaSeq = 0,
binarySign = TRUE)
qgraph(input = bs_network3b_init$pairwise$wadj)
colnames(data_n_3b$data)
qgraph(input = bs_network3b_init$pairwise$wadj,
labels = colnames(data_n_3b$data))
# Compute Predictability
Pred3bx <- predict(bs_network3b_init, data_n_3b$data)
Pred3bx$errors
data_n_3b$type
ncol(data_n_3b$data)
data_n_3b$data[, 17]
hist(data_n_3b$data[, 17])
unique(data_n_3b$data[, 17])
table(data_n_3b$data[, 17])
data_n_3b$type
names(data_n_3b$data)
colnames(data_n_3b$data)
Pred3bx$predicted
dim(Pred3bx$predicted)
Pred3bx$predicted[, 17]
plot(Pred3bx$predicted[, 17])
Pred3bx$true[, 17]
res <- Pred3bx$predicted[, 17] - Pred3bx$true[, 17]
1 - var(res) / var(Pred3bx$true[, 17])
res <- exp(Pred3bx$predicted[, 17]) - Pred3bx$true[, 17]
res
1 - var(res) / var(Pred3bx$true[, 17])
hist(res)
plot(res)
library(devtools)
install_github("jmbh/mgm")
library(mgm)
Pred3bx <- predict(bs_network3b_init, data_n_3b$data)
Pred3bx$errors
# Compute Predictability
Pred3bx <- predict(bs_network3b_init, data_n_3b$data)
Pred3bx$errors
.rs.restartR()
library(mgm)
Pred3bx <- predict(bs_network3b_init, data_n_3b$data)
Pred3bx$errors
