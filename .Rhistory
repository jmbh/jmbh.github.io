content[publishedLine] <- 'published: true'
# browser()
# Edit Jonas July 23rd; delete the "status: XX" line, because it interferes with the blogpost preview on the landing page
content <- content[-7]
# Turn " " lines into "" lines
content[content == " "] <- ""
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = paste0(url_images,f,"/"))
#andy I could try to make figures bigger
#but that might make not work so well on mobile
#opts_chunk$set(fig.width  = 8.5,
#               fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
rmd2md()
data <- read.table("msq.csv", sep=",", header=T)
data <- data[, c("hostile", "lonely", "nervous", "sleepy", "depressed")]
data <- na.omit(data) # exclude rows with missing values
head(data)
rmd2md()
rmd2md()
rmd2md()
2*3*2*2*3*2
n <- 1000
n <- 1000
x1 <- rnorm(n)
y1 <- rnorm(n)
x2 <- rnorm(n)
y2 <- x2 + rnorm(n)
set.seed(1)
n <- 10000
x1 <- rnorm(n)
y1 <- rnorm(n)
x2 <- rnorm(n)
y2 <- x2 + rnorm(n)
# Separately
lm(y1~x1)
lm(y2~x2)
x <- c(x1, x2)
y <- c(y1, y2)
z <- c(rep(0, n), rep(1, n))
# Separately
lm(y1~x1)
lm(y2~x2)
# Moderation
lm(y~x*z)
# Separately
mod1 <- lm(y1~x1)
mod2 <- lm(y2~x2)
# Moderation
mod_cmb <- lm(y~x*z)
mod1$coefficients[2]
mod1$coefficients[2] - 0
mod1$coefficients[2] - 1
abs(mod1$coefficients[2] - 0)
abs(mod1$coefficients[2] - 1)
mod_cmb$coefficients[2] + mod_cmb$coefficients[3]
mod_cmb$coefficients[2]
mod_cmb$coefficients[2]
abs(mod1$coefficients[2] - 0)
abs(mod1$coefficients[2] - 1)
mod_cmb$coefficients[2] + mod_cmb$coefficients[3]
mod_cmb$coefficients[2] - 0
abs(mod_cmb$coefficients[2] + mod_cmb$coefficients[3] - 1)
abs(mod1$coefficients[2] - 1)
split_1 <- abs(mod1$coefficients[2] - 0)
split_2 <- abs(mod1$coefficients[2] - 1)
cmb_1 <- abs(mod_cmb$coefficients[2] - 0)
cmb_2 <- abs(mod_cmb$coefficients[2] + mod_cmb$coefficients[3] - 1)
split_1 <- abs(mod1$coefficients[2] - 0)
split_2 <- abs(mod1$coefficients[2] - 1)
comp_1 <- split_1 - cmb_1
comp_1 <- split_1 - cmb_1
comp_2 <- split_2 - cmb_2
out <- matrix(NA, nIter, 2)
nIter <- 100
nIter <- 100
out <- matrix(NA, nIter, 2)
for(i in 1:nIter) {
set.seed(i)
n <- 10000
x1 <- rnorm(n)
y1 <- rnorm(n)
x2 <- rnorm(n)
y2 <- x2 + rnorm(n)
x <- c(x1, x2)
y <- c(y1, y2)
z <- c(rep(0, n), rep(1, n))
# Separately
mod1 <- lm(y1~x1)
mod2 <- lm(y2~x2)
split_1 <- abs(mod1$coefficients[2] - 0)
split_2 <- abs(mod1$coefficients[2] - 1)
# Moderation
mod_cmb <- lm(y~x*z)
cmb_1 <- abs(mod_cmb$coefficients[2] - 0)
cmb_2 <- abs(mod_cmb$coefficients[2] + mod_cmb$coefficients[3] - 1)
comp_1 <- split_1 - cmb_1
comp_2 <- split_2 - cmb_2
out[i, 1] <- comp_1
out[i, 2] <- comp_1
print(i)
}
out
hist(out)
hist(out[, 1])
mean(out[, 1])
hist(out[, 2])
mean(out[, 2])
out <- rep(NA, nIter)
# Separately
mod1 <- lm(y1~x1+k1)
mod2 <- lm(y2~x2+k2)
x <- c(x1, x2)
y <- c(y1, y2)
k <- c(k1, k2)
z <- c(rep(0, n), rep(1, n))
# Separately
mod1 <- lm(y1~x1+k1)
mod2 <- lm(y2~x2+k2)
set.seed(i)
n <- 10000
x1 <- rnorm(n)
k1 <- rnorm(n)
y1 <- k2 + rnorm(n)
x2 <- rnorm(n)
k2 <- rnorm(n)
y2 <- x2 + k2 + rnorm(n)
x <- c(x1, x2)
y <- c(y1, y2)
k <- c(k1, k2)
z <- c(rep(0, n), rep(1, n))
# Separately
mod1 <- lm(y1~x1+k1)
mod2 <- lm(y2~x2+k2)
mod1
mod2
# Moderation
mod_cmb <- lm(y~x*z)
mod_cmb$coefficients
# Moderation
mod_cmb <- lm(y~x*z+k)
mod_cmb$coefficients
mod1
mod1$coefficients[3]
nIter <- 100
out <- matrix(NA, nIter, 2)
out <- rep(NA, nIter)
for(i in 1:nIter) {
set.seed(i)
n <- 10000
x1 <- rnorm(n)
k1 <- rnorm(n)
y1 <- k2 + rnorm(n)
x2 <- rnorm(n)
k2 <- rnorm(n)
y2 <- x2 + k2 + rnorm(n)
x <- c(x1, x2)
y <- c(y1, y2)
k <- c(k1, k2)
z <- c(rep(0, n), rep(1, n))
# Separately
mod1 <- lm(y1~x1+k1)
mod2 <- lm(y2~x2+k2)
# split_1 <- abs(mod1$coefficients[2] - 0)
# split_2 <- abs(mod1$coefficients[2] - 1)
# Moderation
mod_cmb <- lm(y~x*z+k)
# cmb_1 <- abs(mod_cmb$coefficients[2] - 0)
# cmb_2 <- abs(mod_cmb$coefficients[2] + mod_cmb$coefficients[3] - 1)
# comp_1 <- split_1 - cmb_1
# comp_2 <- split_2 - cmb_2
out[i] <- abs(mod1$coefficients[3] -  mod_cmb$coefficients[4])
# out[i, 1] <- comp_1
# out[i, 2] <- comp_1
print(i)
}
hist(out[, 1])
mean(out[, 1])
hist(out[, 2])
mean(out[, 2])
hist(out)
library("ggplot2")
library("dlstats")
install.packages("dlstats")
library("dlstats")
x <- cran_stats(c("mgm", "IsingFit", "qgraph", "bootnet"))
if (!is.null(x)) {
head(x)
ggplot(x, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))
}
head(x)
x
x <- cran_stats(c("mgm"))
if (!is.null(x)) {
head(x)
ggplot(x, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))
}
x
x <- seq(-5, 5, length=100)
x
xa <- abs(x)
xa
plot(xa)
plot(x, ya)
x <- seq(-5, 5, length=100)
y <- x
ya <- abs(y)
plot(x, ya)
y[-n]-y[-1]
n <- 100
n <- 100
n <- 100
x <- seq(-5, 5, length=n)
y <- x
ya <- abs(y)
y[-n]-y[-1]
ya[-n]-ya[-1]
y[-n]-y[-1]
ya[-n]-ya[-1]
y[-n]-y[-1]
library(devtools)
install_github("jmbh/mgm")
install_github("jmbh/mgm")
libary(mgm)
library(mgm)
library(mgm)
dim(dataGD)
head(dataGD)
mgm_obj <- mgm(data = dataGD,
type = c("g", "g", "c", "g", "c", "g", "c"),
level = c(1, 1, 2, 1, 3, 1, 3),
moderators = 7,
lambdaSel = "EBIC",
lambdaGam = 0.25,
ruleReg = "AND")
l_mgm_cond <- list()
for(g in 1:3) l_mgm_cond[[g]] <- condition(mgm_obj, values = list("7" = g))
library(qgraph)
v_max <- rep(NA, 3)
for(g in 1:3) v_max[g] <- max(l_mgm_cond[[g]]$pairwise$wadj)
par(mfrow=c(1, 3))
for(g in 1:3) {
qgraph(input = l_mgm_cond[[g]]$pairwise$wadj,
edge.color = l_mgm_cond[[g]]$pairwise$edgecolor,
layout = "circle", mar=c(2, 3, 5, 3),
maximum = max(v_max), vsize = 16, esize = 23,
edge.labels  = TRUE, edge.label.cex = 3)
mtext(text = paste0("Group ", g), line = 2.5)
}
res_obj <- resample(object = mgm_obj, data = dataGD, nB = 5)
plotRes(res_obj)
v_max <- rep(NA, 3)
for(g in 1:3) v_max[g] <- max(l_mgm_cond[[g]]$pairwise$wadj)
par(mfrow=c(1, 3))
for(g in 1:3) {
qgraph(input = l_mgm_cond[[g]]$pairwise$wadj,
edge.color = l_mgm_cond[[g]]$pairwise$edgecolor,
layout = "circle", mar=c(2, 3, 5, 3),
maximum = max(v_max), vsize = 16, esize = 23,
edge.labels  = TRUE, edge.label.cex = 3)
mtext(text = paste0("Group ", g), line = 2.5)
}
install_github("jmbh/mgm")
mgm_obj <- mgm(data = dataGD,
type = c("g", "g", "c", "g", "c", "g", "c"),
level = c(1, 1, 2, 1, 3, 1, 3),
moderators = 7,
lambdaSel = "EBIC",
lambdaGam = 0.25,
ruleReg = "AND",
pbar = FALSE)
l_mgm_cond <- list()
for(g in 1:3) l_mgm_cond[[g]] <- condition(mgm_obj, values = list("7" = g))
?mgm
?mgm
.rs.restartR()
install_github("jmbh/mgm")
mgm_obj <- mgm(data = dataGD,
type = c("g", "g", "c", "g", "c", "g", "c"),
level = c(1, 1, 2, 1, 3, 1, 3),
moderators = 7,
lambdaSel = "EBIC",
lambdaGam = 0.25,
ruleReg = "AND",
pbar = FALSE)
l_mgm_cond <- list()
for(g in 1:3) l_mgm_cond[[g]] <- condition(mgm_obj, values = list("7" = g))
library(qgraph)
v_max <- rep(NA, 3)
for(g in 1:3) v_max[g] <- max(l_mgm_cond[[g]]$pairwise$wadj)
par(mfrow=c(1, 3))
for(g in 1:3) {
qgraph(input = l_mgm_cond[[g]]$pairwise$wadj,
edge.color = l_mgm_cond[[g]]$pairwise$edgecolor_cb,
lty = l_mgm_cond[[g]]$pairwise$edge_lty,
layout = "circle", mar=c(2, 3, 5, 3),
maximum = max(v_max), vsize = 16, esize = 23,
edge.labels  = TRUE, edge.label.cex = 3)
mtext(text = paste0("Group ", g), line = 2.5)
}
l_mgm_cond[[g]]$pairwise$edge_lty
v_max <- rep(NA, 3)
for(g in 1:3) v_max[g] <- max(l_mgm_cond[[g]]$pairwise$wadj)
par(mfrow=c(1, 3))
for(g in 1:3) {
qgraph(input = l_mgm_cond[[g]]$pairwise$wadj,
edge.color = l_mgm_cond[[g]]$pairwise$edgecolor_cb,
lty = l_mgm_cond[[g]]$pairwise$edge_lty,
layout = "circle", mar=c(2, 3, 5, 3),
maximum = max(v_max), vsize = 16, esize = 23,
edge.labels  = TRUE, edge.label.cex = 3)
mtext(text = paste0("Group ", g), line = 2.5)
}
#' This R script will process all R mardown files (those with in_ext file extention,
#' .rmd by default) in the current working directory. Files with a status of
#' 'processed' will be converted to markdown (with out_ext file extention, '.markdown'
#' by default). It will change the published parameter to 'true' and change the
#' status parameter to 'publish'.
#'
#' @param path_site path to the local root storing the site files
#' @param dir_rmd directory containing R Markdown files (inputs)
#' @param dir_md directory containing markdown files (outputs)
#' @param url_images where to store/get images created from plots directory +"/" (relative to path_site)
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer <jason@bryer.org> edited by Andy South
#'
rmd2md <- function( path_site = getwd(),
dir_rmd = "_source",
dir_md = "_posts",
#dir_images = "figures",
url_images = "assets/img/",
out_ext='.md',
in_ext='.Rmd',
recursive=FALSE) {
require(knitr, quietly=FALSE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
show(files)
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f))
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
# browser()
# Edit Jonas July 23rd; delete the "status: XX" line, because it interferes with the blogpost preview on the landing page
content <- content[-7]
# Turn " " lines into "" lines
content[content == " "] <- ""
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = paste0(url_images,f,"/"))
#andy I could try to make figures bigger
#but that might make not work so well on mobile
#opts_chunk$set(fig.width  = 8.5,
#               fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
rmd2md()
rmd2md()
lmat <- rbind(c(1,2,3),
c(4,4,4))
lo <- layout(mat = lmat)
layout.show(lo)
lo <- layout(mat = lmat, heights = c(.6, 1))
layout.show(lo)
for(g in 1:3) {
qgraph(input = l_mgm_cond[[g]]$pairwise$wadj,
edge.color = l_mgm_cond[[g]]$pairwise$edgecolor_cb,
lty = l_mgm_cond[[g]]$pairwise$edge_lty,
layout = "circle", mar = c(2, 3, 5, 3),
maximum = max(v_max), vsize = 16, esize = 23,
edge.labels  = TRUE, edge.label.cex = 3)
mtext(text = paste0("Group ", g), line = 2.5)
}
plotRes(res_obj)
lmat <- rbind(c(1,2,3),
c(4,4,4))
lo <- layout(mat = lmat, heights = c(.6, 1))
# layout.show(lo)
for(g in 1:3) {
qgraph(input = l_mgm_cond[[g]]$pairwise$wadj,
edge.color = l_mgm_cond[[g]]$pairwise$edgecolor_cb,
lty = l_mgm_cond[[g]]$pairwise$edge_lty,
layout = "circle", mar = c(2, 3, 5, 3),
maximum = max(v_max), vsize = 16, esize = 23,
edge.labels  = TRUE, edge.label.cex = 3)
mtext(text = paste0("Group ", g), line = 2.5)
}
plotRes(res_obj)
layout.show(lo)
lmat <- rbind(c(1,2,3),
c(4,4,4))
lo <- layout(mat = lmat, heights = c(.6, 1))
layout.show(lo)
layout(mat = lmat, heights = c(.6, 1))
for(g in 1:3) {
qgraph(input = l_mgm_cond[[g]]$pairwise$wadj,
edge.color = l_mgm_cond[[g]]$pairwise$edgecolor_cb,
lty = l_mgm_cond[[g]]$pairwise$edge_lty,
layout = "circle", mar = c(2, 3, 5, 3),
maximum = max(v_max), vsize = 16, esize = 23,
edge.labels  = TRUE, edge.label.cex = 3)
mtext(text = paste0("Group ", g), line = 2.5)
}
plotRes(res_obj)
pdf("OnlinePic_part1.pdf", width=9, height = 3)
for(g in 1:3) {
qgraph(input = l_mgm_cond[[g]]$pairwise$wadj,
edge.color = l_mgm_cond[[g]]$pairwise$edgecolor_cb,
lty = l_mgm_cond[[g]]$pairwise$edge_lty,
layout = "circle", mar = c(2, 3, 5, 3),
maximum = max(v_max), vsize = 16, esize = 23,
edge.labels  = TRUE, edge.label.cex = 3)
mtext(text = paste0("Group ", g), line = 2.5)
}
dev.off()
pdf("OnlinePic_part2.pdf", width=9, height = 7)
plotRes(res_obj)
dev.off()
dev.off()
dev.off()
dev.off()
pdf("OnlinePic_part1.pdf", width=9, height = 3)
par(mfrow=c(1, 3))
for(g in 1:3) {
qgraph(input = l_mgm_cond[[g]]$pairwise$wadj,
edge.color = l_mgm_cond[[g]]$pairwise$edgecolor_cb,
lty = l_mgm_cond[[g]]$pairwise$edge_lty,
layout = "circle", mar = c(2, 3, 5, 3),
maximum = max(v_max), vsize = 16, esize = 23,
edge.labels  = TRUE, edge.label.cex = 3)
mtext(text = paste0("Group ", g), line = 2.5)
}
dev.off()
pdf("OnlinePic_part2.pdf", width=9, height = 5)
plotRes(res_obj)
dev.off()
pdf("OnlinePic_part2.pdf", width=7, height = 5)
plotRes(res_obj)
dev.off()
pdf("OnlinePic_part2.pdf", width=7, height = 4)
plotRes(res_obj)
dev.off()
